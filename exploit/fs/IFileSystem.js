var utils = require('../utils');
var Result = require('../Result');

function IFileSystem (sc, handle) {
	this.sc = sc;
	this.handle = handle;
}

IFileSystem.prototype.OpenDir = function (dir, flags) {
	if (flags === undefined) { flags = 3; }
	var path = utils.str2ab(dir);
	var self = this;
	return this.sc.ipcMsg(9).datau64(flags).xDescriptor(path, path.byteLength, 0).sendTo(this.handle).asResult()
		.map((r) => new self.sc.IDirectory(self.sc, dir, r.movedHandles[0], self));
};

IFileSystem.prototype.CreateFile = function (path, size) {
	if (size === undefined) {
		size = 0x100;
	}
	var pbuf = utils.str2ab(path);
	var res = this.sc.ipcMsg(0).datau64(0, size).xDescriptor(pbuf, pbuf.byteLength, 0).sendTo(this.handle);
	return res.asResult();
};

IFileSystem.prototype.CreateDir = function (dir) {
	var path = utils.str2ab(dir);
	return this.sc.ipcMsg(2).xDescriptor(path, path.byteLength, 0).sendTo(this.handle).asResult();
};

IFileSystem.prototype.CreateDirectory = IFileSystem.prototype.CreateDir;

IFileSystem.prototype.OpenFileWithMode = function (path, mode) {
	var pbuf = utils.str2ab(path);
	var self = this;
	return this.sc.ipcMsg(8).datau32(mode).xDescriptor(pbuf, pbuf.byteLength, 0).sendTo(this.handle)
		.asResult()
		.map((r) => new self.sc.IFile(self.sc, r.movedHandles[0]));
};

IFileSystem.prototype.OpenFile = function (path) {
	var self = this;
	return self.OpenFileWithMode(path, 3);
};

IFileSystem.prototype.OpenReadFile = function (path) {
	var self = this;
	return self.OpenFileWithMode(path, 1);
};

IFileSystem.prototype.Commit = function () {
	return sc.ipcMsg(10).sendTo(this.handle).asResult();
};

IFileSystem.prototype.Close = function () {
	return this.sc.svcCloseHandle(this.handle);
};

IFileSystem.prototype.DeleteFile = function (path) {
	var pbuf = utils.str2ab(path);
	var res = this.sc.ipcMsg(1).datau64(0).xDescriptor(pbuf, pbuf.byteLength, 0).sendTo(this.handle);
	return res.asResult();
};

IFileSystem.prototype.DeleteDir = function (dir, recursive) {
	if (recursive === undefined) { recursive = false; }
	var path = utils.str2ab(dir);
	return this.sc.ipcMsg(recursive ? 4 : 3).xDescriptor(path, path.byteLength, 0).sendTo(this.handle).asResult();
};

IFileSystem.prototype.DumpBufferToNewFile = function (path, buffer, size) {
	var self = this;
	self.DeleteFile(path);
	return self.CreateFile(path, size).andThen(r => {
		var pbuf = utils.str2ab(path);
		return self.sc.ipcMsg(8).datau32(2).xDescriptor(pbuf, pbuf.byteLength, 0).sendTo(self.handle)
			.asResult()
			.map((r) => {
				var f = new self.sc.IFile(self.sc, r.movedHandles[0]);
				return f.Write(0, buffer, size);
			});
	});
};

module.exports = IFileSystem;
